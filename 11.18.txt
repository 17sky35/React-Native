1. github 매일 관리
ㄴ 오늘 배운게 뭐가 어려웠다. -> 좀 더 ~에 대해 공부를 했다
ㄴ 개인프로젝트 팀1,개인1 

2. 팀프로젝트
ㄴ 기획 (주제, 변수명, 함수명, 아키텍처, DB,화면구성(컴포넌트의 배치,화면의 이동))
ㄴ 개발(React, Springboot, ReactNative) 4~5명 구성

본인이 뭘 할 수 있는가? -> 팀원들이랑 상의(아 적어도 여기까지는 해야한다.)
ㄴ 적극적으로 참여하고 말하기(먹고사는게 달렸음)

이력서,자소서(매일 작성,수정)
남들보다 한발자국 더 움직이기
프로젝트 끝나고 취업할때쯤이면 -> 저보다 잘하는거 (개인적인 바람)
아키텍처 파악,디버깅(인간 오타찾기)
새로운 기술을 배우는데 두려움이 없는가
코딩실력을 늘리고 싶으면 코딩을 많이 많이 해봐야됨

안된다고 옆에서 계속 툴툴대고 한숨쉬고 있는거
수업시간에 돌아다니지 말라고 이야기했는데?
휴대폰하는거 크게 상관 안함 -> 딴짓하다 코드 못쓴거 물어보면 짜증남

공기업,공공기관 -> hwp
사기업 -> word,pdf

프로젝트 때는 오류거의 안봐줌..스스로 최대한 해결
수업때는 아키텍처를 알고 흐름을 알고있음
시간이 오래걸리기 시작, 다른조꺼 못봐줌..

1. 화면이 안나오는데.. ㅎㅎ;;

2. 뭘 하고 있었는데
흐름 이렇게 이렇게 흘러가고
제 생각에는 ~가 잘모소딘거 같은데?
고쳐봤는데 안됨

템플릿은 드리는데 다른 조꺼 드리지는 않는 이유
색깔이 들어가고, 참고할 수 밖에 없다...

주말에 여는 약국 알리미
" 병원 알림

날씨에 따른 복장 앱

전국 주차장 알림

주에 한번씩은 조별로 진행 경과 회의
이번주에 뭐했고,애로사항에는 뭐가 있고 -> 해결중이다, 차주에 뭐할거다.

이력서 기술스택 면접 -> 이력서,자소서,포폴 기반으로 질문이 들어올것 준비
상 중 하로 작성은 지양
language : java	람다식,스트림,OOP에 맞게 설계,메서드를 자유자재로 쓸 수 있다.
front : html,css,js,react	컴포넌트 설계, 비동기통신 할 줄 안다.
backend : springboot	의존성 주입 할 수 있고, JPA 이용했다.
DB : Oracle, H2, MySQL, fireStore
cloud : AWS,firebase
build-tool : gradle
mobile : react-native
ORM : JPA

fireStore

NoSQL(Not Only SQL)
전통적인 데이터베이스와는 달리 다른 데이터 저장 방식을 사용하는 데이터베이스
문서형 저장

컬렉션 : 테이블같은 개념 데이터를 저장하는 기본 단위
JSON처럼 객체로 동작을 하고 키-값쌍으로 구성

문서 : ROW같은 개념

채널 목록화면
생성된 채널을 보여주는 화면
많은 양의 채널을 목록으로 사용자가 보여줄 수도 있다.
채널이 새로 생성되면 자동으로 목록에 추가되록 만들자.

 ScrollView
모든 데이터를 한 번에 렌더링하므로 렌더링 해야 하는 데이터의 양을 알고 있을 때 사용하는것이 좋다.
렌더링하는 데이터가 매우 많을 경우 한번에 모든 데이터를 렌더링하면 렌더링 속도가 느려지고
메모리 사용량이 증가하는 등 성능이 저하된다는 문제가 있다.

FlatList
화면에 적절한 양의 데이터만 렌더링하고 스크롤의 이동에 맞춰 필요한 부분만 추가적으로 렌더링을 하는 특징이 있다.
이런 특징 덕분에 데이터의 길이가 가변적이고 양을 예측할 수 없는 상황에서 사용하기 좋다.

렌더링 되는 아이템의 수
windowSize의 기본값은 21
21이라는 값은 현재 화면 1과 현재 화면보다 앞쪽에 있는 데이터(10)그리고 현재 화면보다 뒤쪽에 있는 데이터(10)을 의미한다.

현재 화면(7) + 이전데이터 (7X 10screens) + 이후 데이터 (7 X 10) = 147

스크롤 맨위에서 아래 데이터 렌더링
현재데이터(7) + 이전데이터(0) + 이후 데이터(7 X 10) = 77개

windowSize를 작은값으로 변경하면 렌더링 되는 데이터가 줄어들어서 메모리의 소비를 줄이고 성능을 향상시킬 수 있다.
빠르게 스크롤을 하면 렌더링 되지 않은 부분은 흰 공백으로 나올 수 있다.

moment 라이브러리
시간 및 날짜와 관련된 함수를 쉽게 작성할 수 있다.

채널화면
각 채널 문서에 message 컬렉션을 만들면 메시지 데이터를 관리할 수 있다.
채널별로 발생한 메시지를 모아서 관리하면 채널에서 주고받는 메시지를 편하게 저장하고 불러올 수 있다.


































